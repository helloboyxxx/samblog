<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Algorithm on Yue's Notes</title><link>https://ofuro.me/tags/algorithm/</link><description>Recent content in Algorithm on Yue's Notes</description><generator>Hugo -- 0.139.2</generator><language>en-us</language><lastBuildDate>Thu, 29 Aug 2024 15:30:07 -0500</lastBuildDate><atom:link href="https://ofuro.me/tags/algorithm/index.xml" rel="self" type="application/rss+xml"/><item><title>Fast Fourier Transform</title><link>https://ofuro.me/posts/473_fft/</link><pubDate>Thu, 29 Aug 2024 15:30:07 -0500</pubDate><guid>https://ofuro.me/posts/473_fft/</guid><description>&lt;blockquote>
&lt;p>I know this name for a long time. But never learnt it. Now it&amp;rsquo;s time.&lt;/p>
&lt;/blockquote>
&lt;h4 id="recap">Recap&lt;/h4>
&lt;p>Previously, Karatsuba&amp;rsquo;s algorithm for integer multiplication. It computes the result in $O(n^{\log_2 3})$ where $n$ is the number of digits.&lt;/p>
&lt;p>Another recap: polynomial representation:
$$
p(x) = \sum_{i = 0}^{n}p_ix^i
$$
And we can represent this polynomial using an array of size $n$.&lt;/p>
&lt;p>Evaluations and additions of polynomials are straightforward computation. Can be done in $O(n)$ time. Naive multiplication is slow, however. It takes $O(n^2)$ time to compute all the coefficient multiplications. FFT helps us speed up this multiplication.&lt;/p></description></item></channel></rss>